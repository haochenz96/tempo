#!/usr/local/bin/python

__author__       = "Anne Marie Noronha"
__contributor__  = ""
__email__        = "noronhaa@mskcc.org"
__version__      = "0.0.2"

import pandas as pd
import os, sys, re, json
import argparse
import yaml

def usage():
    parser = argparse.ArgumentParser(description='parse multiqc general stats table to summarize QC status of any given sample. Results printed to "QC_Status.txt"')
    parser.add_argument('--config-file', dest='configYaml', metavar='filename.yaml', type=str, default="multiqc_config.yaml",
                    help='Input config file of multiqc to "read table_cond_formatting_rules"')
    parser.add_argument('--general-stats-file', dest='originalgenstats', metavar='filename.txt', type=str, default="multiqc_data/multiqc_general_stats.txt",
                    help='Input general stats file generated by multiqc'
        )
    parser.add_argument('--data-json', dest='dataJson', metavar='filename.json', type=str, default="multiqc_data/multiqc_data.json",
                    help='Input total data file in json format')
    args = parser.parse_args()
    return args

def main():
    args = usage()
    with open(args.configYaml) as file:
        configData = yaml.load(file, Loader=yaml.FullLoader)
    file.close()

    with open(args.dataJson) as file:
        jsonData = json.load(file)
    file.close()

    genStats = pd.read_csv(args.originalgenstats, header=0, sep="\t", index_col=0)
    genStats = genStats.rename(columns=lambda x: re.sub('\w*_mqc-generalstats','mqc-generalstats',x) )

    for i in jsonData['report_general_stats_headers']:
        for j in i:
            if 'suffix' in i[j]:
                if i[j]['suffix'] == "%":
                    if i[j]['rid']in list(genStats):
                        genStats[i[j]['rid']] = genStats[i[j]['rid']] * 100

    print(list(genStats))
    qcStatus = pd.DataFrame(columns=["Status","Reason"])

    for index, row in genStats.iterrows():
        if "@" in index:
            continue
        statusIter = dict()
        for i in configData["table_cond_formatting_rules"]:
            if i in list(genStats):
                if not pd.isnull(row[i]):
                    statusIter[i] = assessDataPoint(row[i],configData["table_cond_formatting_rules"][i])
                    print(statusIter)
        sampleStatus = "pass"
        for p in ["warn","fail"]:
            if p in statusIter.values():
                sampleStatus = p
        qcStatus = qcStatus.append(pd.Series({"Status":sampleStatus}, name=index))

    qcStatus.to_csv("QC_Status.txt",index=True, sep="\t")

def assessDataPoint(dataPoint,PF_metrics):
    truth = list()
    for i in ["pass","warn","fail"]:
        if i in PF_metrics:
            for j in PF_metrics[i]:
                for k in j:
                    if k in ["s_eq", "eq"]:
                        if dataPoint == j[k]:
                            truth.append(i)
                    elif k in ["s_ne","ne"]:
                        if dataPoint != j[k]:
                            truth.append(i)
                    elif k in ["s_contains"]:
                        if j[k] in dataPoint:
                            truth.append(i) 
                    elif k in ["gt"]:
                        if dataPoint > j[k]:
                            truth.append(i)
                    else: 
                        if dataPoint < j[k]:
                            truth.append(i)
    for p in ["fail","warn"]:
        if p in truth:
            return p
    return "pass"

if __name__ == "__main__":
    main()
