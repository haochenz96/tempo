///EDITED

/*
 * -------------------------------------------------
 * EDITED Nextflow config file for Sarek
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the configuration folder and imported under a
 * profile name here.
 */

manifest {
  author = 'we did'
  description = 'test pipeline'
  homePage = 'github.com/mskcc/vaporware'
  mainScript = 'main.nf'
  name = 'Sarek'
  nextflowVersion = '>=0.32.0'
  version = '0.1'
}


// Provides extra options for the Java and Nextflow runtime. 
// It must be a blank separated list of -Dkey[=value] properties.

env {
  NXF_OPTS="-Xms1g"
}



singularity {
    enabled = false
}

docker {
    enabled = true
    fixOwnership = true    // https://www.nextflow.io/docs/latest/config.html#scope-docker
    runOptions = "-u \$(id -u):\$(id -g)"
}

// docker.fixOwnership
// https://www.nextflow.io/docs/latest/config.html#scope-docker
// This option will changes ownership of the files, once the docker process is over


process {
  withName:AlignReads {
    container = "quay.io/collaboratory/dockstore-tool-bwa-mem:1.0"
    memory = { 20.GB * task.attempt }
    cpus = { 10 }
  }
  withName:ConvertSAMtoBAM {
    container = "quay.io/cancercollaboratory/dockstore-tool-samtools-view:1.0"
    memory = { 20.GB * task.attempt }
    cpus = { 10 }
  }
  withName:SortBAM {
    container = "quay.io/cancercollaboratory/dockstore-tool-samtools-sort:1.0"
    memory = { 20.GB * task.attempt }
    cpus = { 10 }
  }
  withName:MarkDuplicates {
    // Actually the -Xmx value should be kept lower,
    // and is set through the markdup_java_options; cf https://github.com/SciLifeLab/Sarek/blob/master/conf/resources.config#L31
    container = "broadinstitute/gatk:latest"
    memory = { 20.GB * task.attempt }
    cpus = { 8 }
  }
  withName:CreateRecalibrationTable {
    container = "broadinstitute/gatk:latest"
    memory = { 15.GB * task.attempt}
    cpus = { 1 }
  }
  withName:RecalibrateBam {
    container = "broadinstitute/gatk:latest"
    cpus = { 2 }
    memory = { 15.GB * 2 * task.attempt}
     time = { 10.h * task.attempt}
  }
}




params {
  help = false          // boolean help flag
  outDir = "${PWD}"     // Path to output directory, default PWD
  sample =  "/Users/biederse/pipeline_development/Sarek_revisions_25Jan2019/Sarek-data/testdata/tsv/tiny-manta.tsv"   // sample TSV file
  genome = 'smallGRCh37'     // Default reference genome is GRCh38
  // path to reference files subdirectory
  genome_base = '/Users/biederse/pipeline_development/Sarek_revisions_25Jan2019/References/smallGRCh37'  
  verbose = true        // Enable for more verbose information, default false
  test = false          // boolean Not testing by default
  markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption
  // see https://github.com/SciLifeLab/Sarek/blob/master/conf/base.config
  singleCPUMem  = 7.GB  // for processes that are using more memory but a single CPU only
  publishDirMode = 'link' // publishDir mode is 'link' by default

  genomes {
    'GRCh37' {
      acLoci      = "${params.genome_base}/1000G_phase3_20130502_SNP_maf0.3.loci"
      dbsnp       = "${params.genome_base}/dbsnp_138.b37.vcf"
      dbsnpIndex  = "${dbsnp}.idx"
      genomeFile  = "${params.genome_base}/human_g1k_v37_decoy.fasta"
      bwaIndex    = "${genomeFile}.{amb,ann,bwt,pac,sa}"
      genomeDict  = "${params.genome_base}/human_g1k_v37_decoy.dict"
      genomeIndex = "${genomeFile}.fai"
      intervals   = "${params.genome_base}/wgs_calling_regions_CAW.list"
      knownIndels = "${params.genome_base}/{1000G_phase1,Mills_and_1000G_gold_standard}.indels.b37.vcf"
      knownIndelsIndex = "${params.genome_base}/{1000G_phase1,Mills_and_1000G_gold_standard}.indels.b37.vcf.idx"
      snpeffDb    = "GRCh37.75"
    }
    'GRCh38' {
      acLoci        = "${params.genome_base}/1000G_phase3_GRCh38_maf0.3.loci"
      dbsnp         = "${params.genome_base}/dbsnp_146.hg38.vcf.gz"
      dbsnpIndex    = "${dbsnp}.tbi"
      genomeFile    = "${params.genome_base}/Homo_sapiens_assembly38.fasta"
      genomeDict    = "${params.genome_base}/Homo_sapiens_assembly38.dict"
      genomeIndex   = "${genomeFile}.fai"
      bwaIndex      = "${genomeFile}.64.{alt,amb,ann,bwt,pac,sa}"
      intervals     = "${params.genome_base}/wgs_calling_regions.hg38.bed"
      knownIndels   = "${params.genome_base}/{Mills_and_1000G_gold_standard.indels.hg38,beta/Homo_sapiens_assembly38.known_indels}.vcf.gz"
      knownIndelsIndex = "${params.genome_base}/{Mills_and_1000G_gold_standard.indels.hg38,beta/Homo_sapiens_assembly38.known_indels}.vcf.gz.tbi"
      snpeffDb      = "GRCh38.86"
      // This a nasty-looking list of allele-frequencies files. Add/remove files to match to your sets
      //AF_files      = "${params.genome_base}/{00-All.dbsnp_151.hg38.CAF.TOPMED.alternate.allele.freq,hapmap_3.3_grch38_pop_stratified_af.HMAF,SweGen_hg38_stratified.SWAF}.vcf"
      //AF_indexes    = "${params.genome_base}/{00-All.dbsnp_151.hg38.CAF.TOPMED.alternate.allele.freq,hapmap_3.3_grch38_pop_stratified_af.HMAF,SweGen_hg38_stratified.SWAF}.vcf.idx"
    }
    'smallGRCh37' {
      acLoci      = "${params.genome_base}/1000G_phase3_20130502_SNP_maf0.3.small.loci"
      dbsnp       = "${params.genome_base}/dbsnp_138.b37.small.vcf"
      dbsnpIndex  = "${dbsnp}.idx"
      genomeFile  = "${params.genome_base}/human_g1k_v37_decoy.small.fasta"
      bwaIndex    = "${genomeFile}.{amb,ann,bwt,pac,sa}"
      genomeDict  = "${params.genome_base}/human_g1k_v37_decoy.small.dict"
      genomeIndex = "${genomeFile}.fai"
      intervals   = "${params.genome_base}/small.intervals"
      knownIndels = "${params.genome_base}/{1000G_phase1,Mills_and_1000G_gold_standard}.indels.b37.small.vcf"
      knownIndelsIndex = "${params.genome_base}/{1000G_phase1,Mills_and_1000G_gold_standard}.indels.b37.small.vcf.idx"
      snpeffDb    = "GRCh37.75"
    }
  }
}







//  withName:MarkDuplicates {
//    container = "broadinstitute/gatk:latest"
//    memory = { 8.GB * task.attempt }
//    cpus = { 8 }
//  }
//  withName:RecalibrateBam {
//    container = "broadinstitute/gatk:latest"
//    cpus = { 2 }
//    memory = { 7.GB * 2 * task.attempt}
//    time = { 10.h * task.attempt}
//  }
//  withName:CreateRecalibrationTable {
//    container = "broadinstitute/gatk:latest"
//    cpus = { 1 }
//    memory = { 20.GB * task.attempt}
//  }


//workflow.onComplete {
//  log.info ( workflow.success ? "\nDone! Open the following report in your browser --> $params.outdir/multiqc_report.html\n" : "Oops .. something went wrong" )
//}